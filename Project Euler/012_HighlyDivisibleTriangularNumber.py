# Highly divisible triangular number
#
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Problem taken from: https://projecteuler.net/problem=12

from timeit import default_timer as timer

#
# claculates the triangular number for an input
#
def getDreieckszahl(n):
    dreieckszahl = (n*(n+1))/2
    return int(dreieckszahl)

#
# Outputs an array with primenumbers from 2 to n
#
def siebDesEratosthenes(n):

    numbers = []
    for i in range(n+1):
        numbers.append(True)

    numbers[0] = False
    numbers[1] = False
    position = 2

    while position ** 2 < (n+1):

        if numbers[position] == True:
            for i in range(position*2, n+1, position):
                numbers[i] = False

        position += 1

    primzahlen = []
    for i in range(n+1):
        if numbers[i] == True:
            primzahlen.append(i)

    return primzahlen


#
# Outputs the number of divisors for a given integer
#
def getTeiler(n, primzahlen):

    teiler = 1
    counter = 0

    for i in primzahlen:
        if i <= n:
            while n % i == 0:
                n = n // i
                counter += 1

            if counter > 0:
                teiler *= (counter + 1)

            counter = 0

    return teiler


def main():

    start = timer()
    höchste_teileranzahl = 0
    primzahlen = siebDesEratosthenes(100)

    for i in range(1,60000):

        Dreieckszahl = getDreieckszahl(i)
        teiler = getTeiler(Dreieckszahl, primzahlen)

        if teiler > höchste_teileranzahl:
            höchste_teileranzahl = teiler

        if höchste_teileranzahl > 500:
            end = timer()
            print("Runtime: " + str(end - start))

            return Dreieckszahl, teiler

print(main())

# Antwort: 76576500 mit 576 Teiler
# Runtime: Runtime: 0.05 sec
